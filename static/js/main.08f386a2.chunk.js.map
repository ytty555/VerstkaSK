{"version":3,"sources":["img/pair.svg","components/HeaderMain/HeaderMain.js","components/FooterMain/FooterMain.js","components/ControlPanel/ControlPanel.js","components/MainBlock/Page.js","components/MainBlock/PagePair.js","components/MainBlock/MainBlock.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HeaderMain","react_default","a","createElement","className","Component","FooterMain","ControlPanel","Page","_ref","position","pageState","el","pagePosition","getElementsClassNames","pageColor","pageId","PagePair","props","src","require","alt","MainBlock_Page","pageMakeUp","pagePhoto","pageDelegated","MainBlock","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","generateEmptyStateArray","pageQuantity","resArr","pageInfoObj","pageID","makeup","photo","delegated","i","String","tempObj","assign","push","count","self","numForPair","pair","res","toTwo","num","arr","map","leftP","rightP","getCurrentPageStatus","pID","allPageState","length","lPS","rPS","MainBlock_PagePair","key","stateLeftPage","stateRightPage","renderPagePair","arrPagesPair","App","components_HeaderMain_HeaderMain","components_ControlPanel_ControlPanel","components_MainBlock_MainBlock","components_FooterMain_FooterMain","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08f386a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pair.cfcc8909.svg\";","import React, { Component } from 'react';\r\n\r\nclass HeaderMain extends Component {\r\n  render() {\r\n    return (\r\n      <header className=\"header-main\" />\r\n    )\r\n  }\r\n}\r\n\r\nexport default HeaderMain;\r\n","import React, { Component } from 'react';\r\n\r\nclass FooterMain extends Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"footer-main\">\r\n        <p className=\"app-version\">v2.0.1.</p>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FooterMain;\r\n","import React, { Component } from 'react';\r\n\r\nclass ControlPanel extends Component {\r\n  render() {\r\n    return (\r\n      <section className=\"control-panel\" />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ControlPanel;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Page({ position, pageState }) {\r\n  const el = getElementsClassNames(position);\r\n  const pageColor = pageState.pageColor ? \" page_color\" : \"\";\r\n\r\n  return (\r\n    <div className={el.pagePosition}>\r\n      <div className={\"page__el-color\" + pageColor} />\r\n      <div className=\"page__el-number\">{pageState.pageId}</div>\r\n      <button className=\"page__el-make-up\" />\r\n      <button className=\"page__el-photo\" />\r\n      <button className=\"page__el-delegated \" />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getElementsClassNames(position) {\r\n  if (position === 0) {\r\n    // левая полоса\r\n    return {\r\n      pagePosition: \"page_pos_left\"\r\n    };\r\n  } else if (position === 1) {\r\n    // правая полоса\r\n    return {\r\n      pagePosition: \"page_pos_right\"\r\n    };\r\n  }\r\n}\r\n\r\nPage.propTypes = {\r\n  position: PropTypes.number.isRequired,\r\n  pageState: PropTypes.shape({\r\n    pageId: PropTypes.number.isRequired,\r\n    pageColor: PropTypes.bool.isRequired,\r\n    pageMakeUp: PropTypes.bool.isRequired,\r\n    pagePhoto: PropTypes.bool.isRequired,\r\n    pageDelegated: PropTypes.bool.isRequired\r\n  })\r\n};\r\n\r\nexport default Page;\r\n","import React from \"react\";\r\nimport Page from \"./Page\";\r\n\r\nfunction PagePair(props) {\r\n\r\n    const pageStateLeft = {\r\n      pageId: 14,\r\n      pageColor: true,\r\n      pageMakeUp: false,\r\n      pagePhoto: false,\r\n      pageDelegated: true,\r\n    };\r\n\r\n    const pageStateRight = {\r\n      pageId: 15,\r\n      pageColor: false,\r\n      pageMakeUp: true,\r\n      pagePhoto: true,\r\n      pageDelegated: false,\r\n    };\r\n\r\n    return (\r\n      <div className=\"page-pair\">\r\n        <img\r\n          className=\"page-pair-background\"\r\n          src={require(\"../../img/pair.svg\")}\r\n          alt=\"Изображение разворота полос\"\r\n        />\r\n        <Page\r\n          position={0}\r\n          pageState={pageStateLeft}\r\n        />\r\n        <Page\r\n          position={1}\r\n          pageState={pageStateRight}\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default PagePair;\r\n","import React, { Component } from \"react\";\r\nimport PagePair from \"./PagePair\";\r\n\r\nclass MainBlock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = this.generateEmptyStateArray(28);\r\n  }\r\n\r\n  generateEmptyStateArray(pageQuantity) {\r\n    let resArr = [];\r\n    let pageInfoObj = {\r\n      pageID: null,\r\n      pageColor: null,\r\n      pageState: {\r\n        makeup: null,\r\n        photo: null,\r\n        delegated: null\r\n      }\r\n    };\r\n    for (let i = 1; i <= pageQuantity; i++) {\r\n      pageInfoObj.pageID = i < 10 ? \"0\" + i : String(i);\r\n      pageInfoObj.pageColor = 1;\r\n      pageInfoObj.pageState.makeup = false;\r\n      pageInfoObj.pageState.photo = false;\r\n      pageInfoObj.pageState.delegated = false;\r\n      let tempObj = Object.assign({}, pageInfoObj);\r\n\r\n      resArr.push(tempObj);\r\n    }\r\n    return resArr;\r\n  }\r\n\r\n  arrPagesPair(count) {\r\n    let self = this;\r\n\r\n    // Функция возвращает номера полос разворота в виде массива номеров полос (левая и правая)\r\n    function numForPair(count, pair) {\r\n      // Массив из номеров полос: левая полоса и правая\r\n      let res = [null, null];\r\n\r\n      // Переводит num в струку из двух символов\r\n      function toTwo(num) {\r\n        return num < 10 ? \"0\" + String(num) : String(num);\r\n      }\r\n\r\n      if (pair === 1) {\r\n        res[0] = toTwo(count);\r\n        res[1] = toTwo(pair);\r\n      } else {\r\n        res[0] = toTwo(pair * 2 - 2);\r\n        res[1] = toTwo(pair * 2 - 1);\r\n      }\r\n      return res;\r\n    }\r\n\r\n    function renderPagePair(leftP, rightP) {\r\n      function getCurrentPageStatus(pID) {\r\n        let allPageState = self.state;\r\n        for (let i = 0; i < allPageState.length; i++) {\r\n          if (allPageState[i].pageID === pID) {\r\n            return allPageState[i];\r\n          }\r\n        }\r\n        return -1;\r\n      }\r\n\r\n      let lPS = getCurrentPageStatus(leftP);\r\n      let rPS = getCurrentPageStatus(rightP);\r\n      return (\r\n        <PagePair\r\n          key={lPS.pageID + rPS.pageID}\r\n          stateLeftPage={lPS}\r\n          stateRightPage={rPS}\r\n        />\r\n      );\r\n    }\r\n\r\n    let arr = [];\r\n    for (let i = 1; i <= count / 2; i++) {\r\n      arr.push(i);\r\n    }\r\n    const listItems = arr.map(pair =>\r\n      renderPagePair(numForPair(count, pair)[0], numForPair(count, pair)[1])\r\n    );\r\n    return listItems;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"main-block\">\r\n        <section className=\"page-section\">\r\n          <h1 className=\"visually-hidden\">Раскладка полос</h1>\r\n          <div className=\"page-grid-container\">{this.arrPagesPair(28)}</div>\r\n        </section>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainBlock;\r\n","import React, { Component } from 'react';\r\nimport HeaderMain from './/HeaderMain/HeaderMain';\r\nimport FooterMain from './FooterMain/FooterMain';\r\nimport ControlPanel from './ControlPanel/ControlPanel';\r\nimport MainBlock from './MainBlock/MainBlock';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"all-blocks\">\r\n        <HeaderMain />\r\n        <ControlPanel />\r\n        <MainBlock />\r\n        <FooterMain />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"./css/style.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}